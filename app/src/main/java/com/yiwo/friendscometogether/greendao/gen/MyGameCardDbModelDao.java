package com.yiwo.friendscometogether.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yiwo.friendscometogether.dbmodel.MyGameCardDbModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_GAME_CARD_DB_MODEL".
*/
public class MyGameCardDbModelDao extends AbstractDao<MyGameCardDbModel, Long> {

    public static final String TABLENAME = "MY_GAME_CARD_DB_MODEL";

    /**
     * Properties of entity MyGameCardDbModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Group_No = new Property(3, String.class, "group_No", false, "GROUP__NO");
        public final static Property MyNo = new Property(4, String.class, "myNo", false, "MY_NO");
        public final static Property Captain_user_ID = new Property(5, String.class, "captain_user_ID", false, "CAPTAIN_USER__ID");
        public final static Property Captain_userpic = new Property(6, String.class, "captain_userpic", false, "CAPTAIN_USERPIC");
        public final static Property Captain_username = new Property(7, String.class, "captain_username", false, "CAPTAIN_USERNAME");
        public final static Property Captain_group_No = new Property(8, String.class, "captain_group_No", false, "CAPTAIN_GROUP__NO");
        public final static Property Group_user_ID = new Property(9, String.class, "group_user_ID", false, "GROUP_USER__ID");
        public final static Property Group_game_num = new Property(10, String.class, "group_game_num", false, "GROUP_GAME_NUM");
        public final static Property Group_userpic = new Property(11, String.class, "group_userpic", false, "GROUP_USERPIC");
        public final static Property Group_username = new Property(12, String.class, "group_username", false, "GROUP_USERNAME");
    }


    public MyGameCardDbModelDao(DaoConfig config) {
        super(config);
    }
    
    public MyGameCardDbModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_GAME_CARD_DB_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"TITLE\" TEXT," + // 2: title
                "\"GROUP__NO\" TEXT," + // 3: group_No
                "\"MY_NO\" TEXT," + // 4: myNo
                "\"CAPTAIN_USER__ID\" TEXT," + // 5: captain_user_ID
                "\"CAPTAIN_USERPIC\" TEXT," + // 6: captain_userpic
                "\"CAPTAIN_USERNAME\" TEXT," + // 7: captain_username
                "\"CAPTAIN_GROUP__NO\" TEXT," + // 8: captain_group_No
                "\"GROUP_USER__ID\" TEXT," + // 9: group_user_ID
                "\"GROUP_GAME_NUM\" TEXT," + // 10: group_game_num
                "\"GROUP_USERPIC\" TEXT," + // 11: group_userpic
                "\"GROUP_USERNAME\" TEXT);"); // 12: group_username
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_GAME_CARD_DB_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyGameCardDbModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String group_No = entity.getGroup_No();
        if (group_No != null) {
            stmt.bindString(4, group_No);
        }
 
        String myNo = entity.getMyNo();
        if (myNo != null) {
            stmt.bindString(5, myNo);
        }
 
        String captain_user_ID = entity.getCaptain_user_ID();
        if (captain_user_ID != null) {
            stmt.bindString(6, captain_user_ID);
        }
 
        String captain_userpic = entity.getCaptain_userpic();
        if (captain_userpic != null) {
            stmt.bindString(7, captain_userpic);
        }
 
        String captain_username = entity.getCaptain_username();
        if (captain_username != null) {
            stmt.bindString(8, captain_username);
        }
 
        String captain_group_No = entity.getCaptain_group_No();
        if (captain_group_No != null) {
            stmt.bindString(9, captain_group_No);
        }
 
        String group_user_ID = entity.getGroup_user_ID();
        if (group_user_ID != null) {
            stmt.bindString(10, group_user_ID);
        }
 
        String group_game_num = entity.getGroup_game_num();
        if (group_game_num != null) {
            stmt.bindString(11, group_game_num);
        }
 
        String group_userpic = entity.getGroup_userpic();
        if (group_userpic != null) {
            stmt.bindString(12, group_userpic);
        }
 
        String group_username = entity.getGroup_username();
        if (group_username != null) {
            stmt.bindString(13, group_username);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyGameCardDbModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String group_No = entity.getGroup_No();
        if (group_No != null) {
            stmt.bindString(4, group_No);
        }
 
        String myNo = entity.getMyNo();
        if (myNo != null) {
            stmt.bindString(5, myNo);
        }
 
        String captain_user_ID = entity.getCaptain_user_ID();
        if (captain_user_ID != null) {
            stmt.bindString(6, captain_user_ID);
        }
 
        String captain_userpic = entity.getCaptain_userpic();
        if (captain_userpic != null) {
            stmt.bindString(7, captain_userpic);
        }
 
        String captain_username = entity.getCaptain_username();
        if (captain_username != null) {
            stmt.bindString(8, captain_username);
        }
 
        String captain_group_No = entity.getCaptain_group_No();
        if (captain_group_No != null) {
            stmt.bindString(9, captain_group_No);
        }
 
        String group_user_ID = entity.getGroup_user_ID();
        if (group_user_ID != null) {
            stmt.bindString(10, group_user_ID);
        }
 
        String group_game_num = entity.getGroup_game_num();
        if (group_game_num != null) {
            stmt.bindString(11, group_game_num);
        }
 
        String group_userpic = entity.getGroup_userpic();
        if (group_userpic != null) {
            stmt.bindString(12, group_userpic);
        }
 
        String group_username = entity.getGroup_username();
        if (group_username != null) {
            stmt.bindString(13, group_username);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyGameCardDbModel readEntity(Cursor cursor, int offset) {
        MyGameCardDbModel entity = new MyGameCardDbModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // group_No
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // myNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // captain_user_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // captain_userpic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // captain_username
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // captain_group_No
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // group_user_ID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // group_game_num
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // group_userpic
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // group_username
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyGameCardDbModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroup_No(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMyNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCaptain_user_ID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCaptain_userpic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCaptain_username(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCaptain_group_No(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGroup_user_ID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGroup_game_num(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGroup_userpic(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGroup_username(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyGameCardDbModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyGameCardDbModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyGameCardDbModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

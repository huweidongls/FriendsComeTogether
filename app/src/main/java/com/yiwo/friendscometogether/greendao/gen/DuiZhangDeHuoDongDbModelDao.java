package com.yiwo.friendscometogether.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yiwo.friendscometogether.dbmodel.DuiZhangDeHuoDongDbModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DUI_ZHANG_DE_HUO_DONG_DB_MODEL".
*/
public class DuiZhangDeHuoDongDbModelDao extends AbstractDao<DuiZhangDeHuoDongDbModel, Long> {

    public static final String TABLENAME = "DUI_ZHANG_DE_HUO_DONG_DB_MODEL";

    /**
     * Properties of entity DuiZhangDeHuoDongDbModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DuiZhangID = new Property(1, String.class, "duiZhangID", false, "DUI_ZHANG_ID");
        public final static Property Pfpic = new Property(2, String.class, "pfpic", false, "PFPIC");
        public final static Property PfID = new Property(3, String.class, "pfID", false, "PF_ID");
        public final static Property Pftitle = new Property(4, String.class, "pftitle", false, "PFTITLE");
        public final static Property Phase_num = new Property(5, String.class, "phase_num", false, "PHASE_NUM");
        public final static Property Phase_begin_time = new Property(6, String.class, "phase_begin_time", false, "PHASE_BEGIN_TIME");
        public final static Property Phase_id = new Property(7, String.class, "phase_id", false, "PHASE_ID");
    }


    public DuiZhangDeHuoDongDbModelDao(DaoConfig config) {
        super(config);
    }
    
    public DuiZhangDeHuoDongDbModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DUI_ZHANG_DE_HUO_DONG_DB_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DUI_ZHANG_ID\" TEXT," + // 1: duiZhangID
                "\"PFPIC\" TEXT," + // 2: pfpic
                "\"PF_ID\" TEXT," + // 3: pfID
                "\"PFTITLE\" TEXT," + // 4: pftitle
                "\"PHASE_NUM\" TEXT," + // 5: phase_num
                "\"PHASE_BEGIN_TIME\" TEXT," + // 6: phase_begin_time
                "\"PHASE_ID\" TEXT);"); // 7: phase_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DUI_ZHANG_DE_HUO_DONG_DB_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DuiZhangDeHuoDongDbModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String duiZhangID = entity.getDuiZhangID();
        if (duiZhangID != null) {
            stmt.bindString(2, duiZhangID);
        }
 
        String pfpic = entity.getPfpic();
        if (pfpic != null) {
            stmt.bindString(3, pfpic);
        }
 
        String pfID = entity.getPfID();
        if (pfID != null) {
            stmt.bindString(4, pfID);
        }
 
        String pftitle = entity.getPftitle();
        if (pftitle != null) {
            stmt.bindString(5, pftitle);
        }
 
        String phase_num = entity.getPhase_num();
        if (phase_num != null) {
            stmt.bindString(6, phase_num);
        }
 
        String phase_begin_time = entity.getPhase_begin_time();
        if (phase_begin_time != null) {
            stmt.bindString(7, phase_begin_time);
        }
 
        String phase_id = entity.getPhase_id();
        if (phase_id != null) {
            stmt.bindString(8, phase_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DuiZhangDeHuoDongDbModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String duiZhangID = entity.getDuiZhangID();
        if (duiZhangID != null) {
            stmt.bindString(2, duiZhangID);
        }
 
        String pfpic = entity.getPfpic();
        if (pfpic != null) {
            stmt.bindString(3, pfpic);
        }
 
        String pfID = entity.getPfID();
        if (pfID != null) {
            stmt.bindString(4, pfID);
        }
 
        String pftitle = entity.getPftitle();
        if (pftitle != null) {
            stmt.bindString(5, pftitle);
        }
 
        String phase_num = entity.getPhase_num();
        if (phase_num != null) {
            stmt.bindString(6, phase_num);
        }
 
        String phase_begin_time = entity.getPhase_begin_time();
        if (phase_begin_time != null) {
            stmt.bindString(7, phase_begin_time);
        }
 
        String phase_id = entity.getPhase_id();
        if (phase_id != null) {
            stmt.bindString(8, phase_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DuiZhangDeHuoDongDbModel readEntity(Cursor cursor, int offset) {
        DuiZhangDeHuoDongDbModel entity = new DuiZhangDeHuoDongDbModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // duiZhangID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pfpic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pfID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pftitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phase_num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phase_begin_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // phase_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DuiZhangDeHuoDongDbModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDuiZhangID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPfpic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPfID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPftitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhase_num(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhase_begin_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhase_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DuiZhangDeHuoDongDbModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DuiZhangDeHuoDongDbModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DuiZhangDeHuoDongDbModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

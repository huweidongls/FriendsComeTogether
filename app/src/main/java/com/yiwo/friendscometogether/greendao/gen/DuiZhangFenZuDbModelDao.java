package com.yiwo.friendscometogether.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yiwo.friendscometogether.dbmodel.DuiZhangFenZuDbModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DUI_ZHANG_FEN_ZU_DB_MODEL".
*/
public class DuiZhangFenZuDbModelDao extends AbstractDao<DuiZhangFenZuDbModel, Long> {

    public static final String TABLENAME = "DUI_ZHANG_FEN_ZU_DB_MODEL";

    /**
     * Properties of entity DuiZhangFenZuDbModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PfID = new Property(1, String.class, "pfID", false, "PF_ID");
        public final static Property Phase_id = new Property(2, String.class, "phase_id", false, "PHASE_ID");
        public final static Property Group_No = new Property(3, String.class, "group_No", false, "GROUP__NO");
        public final static Property GameNum = new Property(4, String.class, "gameNum", false, "GAME_NUM");
        public final static Property UserID = new Property(5, String.class, "userID", false, "USER_ID");
        public final static Property User_ID = new Property(6, String.class, "user_ID", false, "USER__ID");
        public final static Property Username = new Property(7, String.class, "username", false, "USERNAME");
        public final static Property Userpic = new Property(8, String.class, "userpic", false, "USERPIC");
    }


    public DuiZhangFenZuDbModelDao(DaoConfig config) {
        super(config);
    }
    
    public DuiZhangFenZuDbModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DUI_ZHANG_FEN_ZU_DB_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PF_ID\" TEXT," + // 1: pfID
                "\"PHASE_ID\" TEXT," + // 2: phase_id
                "\"GROUP__NO\" TEXT," + // 3: group_No
                "\"GAME_NUM\" TEXT," + // 4: gameNum
                "\"USER_ID\" TEXT," + // 5: userID
                "\"USER__ID\" TEXT," + // 6: user_ID
                "\"USERNAME\" TEXT," + // 7: username
                "\"USERPIC\" TEXT);"); // 8: userpic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DUI_ZHANG_FEN_ZU_DB_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DuiZhangFenZuDbModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pfID = entity.getPfID();
        if (pfID != null) {
            stmt.bindString(2, pfID);
        }
 
        String phase_id = entity.getPhase_id();
        if (phase_id != null) {
            stmt.bindString(3, phase_id);
        }
 
        String group_No = entity.getGroup_No();
        if (group_No != null) {
            stmt.bindString(4, group_No);
        }
 
        String gameNum = entity.getGameNum();
        if (gameNum != null) {
            stmt.bindString(5, gameNum);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(6, userID);
        }
 
        String user_ID = entity.getUser_ID();
        if (user_ID != null) {
            stmt.bindString(7, user_ID);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(8, username);
        }
 
        String userpic = entity.getUserpic();
        if (userpic != null) {
            stmt.bindString(9, userpic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DuiZhangFenZuDbModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pfID = entity.getPfID();
        if (pfID != null) {
            stmt.bindString(2, pfID);
        }
 
        String phase_id = entity.getPhase_id();
        if (phase_id != null) {
            stmt.bindString(3, phase_id);
        }
 
        String group_No = entity.getGroup_No();
        if (group_No != null) {
            stmt.bindString(4, group_No);
        }
 
        String gameNum = entity.getGameNum();
        if (gameNum != null) {
            stmt.bindString(5, gameNum);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(6, userID);
        }
 
        String user_ID = entity.getUser_ID();
        if (user_ID != null) {
            stmt.bindString(7, user_ID);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(8, username);
        }
 
        String userpic = entity.getUserpic();
        if (userpic != null) {
            stmt.bindString(9, userpic);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DuiZhangFenZuDbModel readEntity(Cursor cursor, int offset) {
        DuiZhangFenZuDbModel entity = new DuiZhangFenZuDbModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pfID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phase_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // group_No
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gameNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_ID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // username
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // userpic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DuiZhangFenZuDbModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPfID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhase_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroup_No(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGameNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_ID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUsername(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserpic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DuiZhangFenZuDbModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DuiZhangFenZuDbModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DuiZhangFenZuDbModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
